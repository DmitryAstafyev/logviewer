// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

/**
 * Data about indices (log entry numbers). Used to provide information about
 * the nearest search results relative to a specific log entry number.
 */
export type AroundIndexes = [bigint | null, bigint | null];

/**
 * Used to delivery results of extracting values. That's used in the scope
 * of chart feature
 */
export type ExtractedMatchValue = { 
/**
 * The index of log entry (row number)
 */
index: bigint, 
/**
 * List of matches:
 * `usize` - index of filter
 * `Vec<String>` - list of extracted values
 */
values: Array<[number, Array<string>]>, };

/**
 * The list of `ExtractedMatchValue`
 */
export type ExtractedMatchValueList = Array<ExtractedMatchValue>;

/**
 * Describes a match for a search condition.
 */
export type FilterMatch = { 
/**
 * The index (number) of the matching log entry.
 */
index: bigint, 
/**
 * The identifiers of the filters (search conditions) that matched
 * the specified log entry.
 */
filters: Array<number>, };

/**
 * A list of matches for a search condition.
 */
export type FilterMatchList = Array<FilterMatch>;

/**
 * Information about a log entry.
 */
export type GrabbedElement = { 
/**
 * The unique identifier of the source.
 */
source_id: number, 
/**
 * The textual content of the log entry.
 */
content: string, 
/**
 * The position of the log entry in the overall stream.
 */
pos: number, 
/**
 * The nature of the log entry, represented as a bitmask. Possible values include:
 * - `SEARCH`: Nature = Nature(1)
 * - `BOOKMARK`: Nature = Nature(1 << 1)
 * - `EXPANDED`: Nature = Nature(1 << 5)
 * - `BREADCRUMB`: Nature = Nature(1 << 6)
 * - `BREADCRUMB_SEPARATOR`: Nature = Nature(1 << 7)
 */
nature: number, };

/**
 * A list of log entries.
 */
export type GrabbedElementList = Array<GrabbedElement>;

/**
 * Representation of ranges. We cannot use std ranges as soon as no way
 * to derive Serialize, Deserialize
 */
export type Range = { start: bigint, end: bigint, };

/**
 * A list of ranges to read.
 */
export type Ranges = Array<Range>;

export type ResultBool = boolean;

export type ResultU64 = bigint;

/**
 * A request to a stream that supports feedback, such as a terminal command
 * that accepts input through `stdin`.
 */
export type SdeRequest = { "WriteText": string } | { "WriteBytes": Array<number> };

/**
 * The response from a source to a sent `SdeRequest`. Note that sending data
 * with `SdeRequest` does not guarantee a response, as the behavior depends
 * on the source.
 */
export type SdeResponse = { 
/**
 * The number of bytes received.
 */
bytes: number, };

/**
 * Used only for debug session lifecycle
 */
export type SleepResult = { sleep_well: boolean, };

/**
 * Describes a data source.
 */
export type SourceDefinition = { 
/**
 * The unique identifier of the source.
 */
id: number, 
/**
 * The user-friendly name of the source for display purposes.
 */
alias: string, };

/**
 * A list of data sources.
 */
export type Sources = Array<SourceDefinition>;
