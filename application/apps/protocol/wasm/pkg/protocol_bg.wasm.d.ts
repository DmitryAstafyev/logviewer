/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function output_decode(a: number, b: number, c: number): void;
export function output_encode(a: number, b: number): void;
export function __wbg_commandoutcome_free(a: number): void;
export function commandoutcome_decode(a: number, b: number, c: number): void;
export function commandoutcome_encode(a: number, b: number): void;
export function observeoptions_decode(a: number, b: number, c: number): void;
export function observeoptions_encode(a: number, b: number): void;
export function dltparsersettings_decode(a: number, b: number, c: number): void;
export function dltparsersettings_encode(a: number, b: number): void;
export function dltfilterconfig_decode(a: number, b: number, c: number): void;
export function dltfilterconfig_encode(a: number, b: number): void;
export function someipparsersettings_decode(a: number, b: number, c: number): void;
export function someipparsersettings_encode(a: number, b: number): void;
export function processtransportconfig_decode(a: number, b: number, c: number): void;
export function processtransportconfig_encode(a: number, b: number): void;
export function file_decode(a: number, b: number, c: number): void;
export function file_encode(a: number, b: number): void;
export function concat_decode(a: number, b: number, c: number): void;
export function concat_encode(a: number, b: number): void;
export function stream_decode(a: number, b: number, c: number): void;
export function stream_encode(a: number, b: number): void;
export function serialtransportconfig_decode(a: number, b: number, c: number): void;
export function serialtransportconfig_encode(a: number, b: number): void;
export function observeorigin_decode(a: number, b: number, c: number): void;
export function observeorigin_encode(a: number, b: number): void;
export function fileformat_decode(a: number, b: number, c: number): void;
export function fileformat_encode(a: number, b: number): void;
export function sderequest_decode(a: number, b: number, c: number): void;
export function sderequest_encode(a: number, b: number): void;
export function sderesponse_decode(a: number, b: number, c: number): void;
export function sderesponse_encode(a: number, b: number): void;
export function __wbg_output_free(a: number): void;
export function __wbg_observeoptions_free(a: number): void;
export function __wbg_dltparsersettings_free(a: number): void;
export function __wbg_dltfilterconfig_free(a: number): void;
export function __wbg_someipparsersettings_free(a: number): void;
export function __wbg_processtransportconfig_free(a: number): void;
export function __wbg_file_free(a: number): void;
export function __wbg_concat_free(a: number): void;
export function __wbg_stream_free(a: number): void;
export function __wbg_serialtransportconfig_free(a: number): void;
export function __wbg_observeorigin_free(a: number): void;
export function __wbg_fileformat_free(a: number): void;
export function __wbg_sderequest_free(a: number): void;
export function __wbg_sderesponse_free(a: number): void;
export function nativeerror_decode(a: number, b: number, c: number): void;
export function nativeerror_encode(a: number, b: number): void;
export function __wbg_computationerror_free(a: number): void;
export function computationerror_decode(a: number, b: number, c: number): void;
export function computationerror_encode(a: number, b: number): void;
export function grabbedelement_decode(a: number, b: number, c: number): void;
export function grabbedelement_encode(a: number, b: number): void;
export function grabbedelementlist_decode(a: number, b: number, c: number): void;
export function grabbedelementlist_encode(a: number, b: number): void;
export function __wbg_nativeerror_free(a: number): void;
export function __wbg_grabbedelement_free(a: number): void;
export function __wbg_grabbedelementlist_free(a: number): void;
export function __wbg_attachmentinfo_free(a: number): void;
export function attachmentinfo_decode(a: number, b: number, c: number): void;
export function attachmentinfo_encode(a: number, b: number): void;
export function attachmentinfolist_decode(a: number, b: number, c: number): void;
export function attachmentinfolist_encode(a: number, b: number): void;
export function rangeinclusive_decode(a: number, b: number, c: number): void;
export function rangeinclusive_encode(a: number, b: number): void;
export function rangeinclusivelist_decode(a: number, b: number, c: number): void;
export function rangeinclusivelist_encode(a: number, b: number): void;
export function callbackevent_decode(a: number, b: number, c: number): void;
export function callbackevent_encode(a: number, b: number): void;
export function ticks_decode(a: number, b: number, c: number): void;
export function ticks_encode(a: number, b: number): void;
export function lifecycletransition_decode(a: number, b: number, c: number): void;
export function lifecycletransition_encode(a: number, b: number): void;
export function started_decode(a: number, b: number, c: number): void;
export function started_encode(a: number, b: number): void;
export function tickswithuuid_decode(a: number, b: number, c: number): void;
export function tickswithuuid_encode(a: number, b: number): void;
export function __wbg_attachmentinfolist_free(a: number): void;
export function __wbg_rangeinclusive_free(a: number): void;
export function __wbg_rangeinclusivelist_free(a: number): void;
export function __wbg_callbackevent_free(a: number): void;
export function __wbg_ticks_free(a: number): void;
export function __wbg_lifecycletransition_free(a: number): void;
export function __wbg_started_free(a: number): void;
export function __wbg_tickswithuuid_free(a: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
